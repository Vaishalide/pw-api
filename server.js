// -----------------------------------------------------------------------------
// Dependencies (Using ES Module 'import' syntax)
// -----------------------------------------------------------------------------
import express from 'express';
import cors from 'cors';
import https from 'https';
import http from 'http';
import { URL } from 'url';
import { EncryptJWT, jwtDecrypt } from 'jose';
import crypto from 'crypto';
import path from 'path';
import { fileURLToPath } from 'url';

// -----------------------------------------------------------------------------
// Environment & Security Setup
// -----------------------------------------------------------------------------
// Since we are using ES Modules, __dirname is not available. This is how we get it.
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

if (!process.env.JWT_SECRET) {
  console.error("FATAL ERROR: JWT_SECRET environment variable is not set.");
  process.exit(1);
}

const secretKey = crypto.createHash('sha256').update(process.env.JWT_SECRET).digest();
const alg = 'dir';
const enc = 'A256GCM';

// -----------------------------------------------------------------------------
// CORS Configuration
// -----------------------------------------------------------------------------
const allowedOrigins = [
  'https://pwthor.site',
  'https://www.pwjarvis.com',
  // Add other origins for local development if needed:
  'http://localhost:3000',
  'http://127.0.0.1:5500'
];

const corsOptions = {
  origin: (origin, callback) => {
    if (!origin || allowedOrigins.indexOf(origin) !== -1) {
      callback(null, true);
    } else {
      callback(new Error('This origin is not allowed by CORS'));
    }
  },
};

// -----------------------------------------------------------------------------
// Express App Setup
// -----------------------------------------------------------------------------
const app = express();
app.use(cors(corsOptions));
app.options('*', cors(corsOptions));

// -----------------------------------------------------------------------------
// Endpoint: /get-proxy
// -----------------------------------------------------------------------------
app.get('/get-proxy', async (req, res) => {
Â  const originalUrl = req.query.url;
Â  if (!originalUrl) {
Â  Â  return res.status(400).json({ status: "error", error: 'Missing required query parameter: ?url=' });
Â  }

Â  try {
Â  Â  const parsed = new URL(originalUrl);
Â  Â  
    // --- START: MODIFICATION ---
    // 1. Extract the original query string
    const queryString = parsed.search;

    // 2. Build the base URL without the file name or query string
Â  Â  const lastSlash = parsed.pathname.lastIndexOf('/');
Â  Â  const basePath = parsed.pathname.substring(0, lastSlash + 1);
    const baseUrl = `${parsed.protocol}//${parsed.host}${basePath}`;

    // 3. Encrypt both the baseUrl and the queryString into the JWT payload
Â  Â  const token = await new EncryptJWT({ baseUrl, queryString })
    // --- END: MODIFICATION ---
Â  Â  Â  .setProtectedHeader({ alg, enc })
Â  Â  Â  .setIssuedAt()
Â  Â  Â  .setExpirationTime('3h')
Â  Â  Â  .encrypt(secretKey);

Â  Â  const expiresInSeconds = 3 * 60 * 60;

Â  Â  res.json({
Â  Â  Â  status: "success",
Â  Â  Â  m3u8_url: `https://${req.get('host')}/stream/${token}/master.mpd`,
Â  Â  Â  expires_in: expiresInSeconds
Â  Â  });

Â  } catch (e) {
Â  Â  console.error("URL Parsing or Encryption Error:", e.message);
Â  Â  return res.status(400).json({ status: "error", error: "Invalid URL provided" });
Â  }
});
// -----------------------------------------------------------------------------
// Middleware: /stream/:token/*
// -----------------------------------------------------------------------------
app.use('/stream/:token/*', async (req, res) => {
Â  const { token } = req.params;
Â  const filePath = req.params[0];

Â  try {
    // --- START: MODIFICATION ---
    // 1. Decrypt the token and get both baseUrl and queryString from the payload
Â  Â  const { payload: decoded } = await jwtDecrypt(token, secretKey);
    const { baseUrl, queryString } = decoded;

    if (!baseUrl || queryString === undefined) { // Check if queryString exists (can be empty string)
        return res.status(400).json({ status: "error", error: 'Malformed token payload' });
    }

    // 2. Construct the target URL without the query string for now
Â  Â  const targetUrl = baseUrl + filePath;
Â  Â  const parsedUrl = new URL(targetUrl);
    // --- END: MODIFICATION ---

Â  Â  const lib = parsedUrl.protocol === 'https:' ? https : http;

Â  Â  const options = {
Â  Â  Â  hostname: parsedUrl.hostname,
Â  Â  Â  port: parsedUrl.port || (parsedUrl.protocol === 'https:' ? 443 : 80),
      // --- START: MODIFICATION ---
      // 3. Append the stored queryString to the path
Â  Â  Â  path: parsedUrl.pathname + queryString,
      // --- END: MODIFICATION ---
Â  Â  Â  method: 'GET',
Â  Â  Â  headers: {
Â  Â  Â  Â  'User-Agent': req.get('User-Agent') || 'Mozilla/5.0',
Â  Â  Â  Â  'Referer': parsedUrl.origin,
Â  Â  Â  Â  'Origin': parsedUrl.origin,
Â  Â  Â  }
Â  Â  };

Â  Â  const proxyReq = lib.request(options, (proxyRes) => {
      // ... (rest of the code is unchanged)
Â  Â  Â  res.statusCode = proxyRes.statusCode;
Â  Â  Â  Object.keys(proxyRes.headers).forEach((key) => {
Â  Â  Â  Â  const lowerCaseKey = key.toLowerCase();
Â  Â  Â  Â  if (!lowerCaseKey.startsWith('access-control-') && lowerCaseKey !== 'content-encoding') {
Â  Â  Â  Â  Â  res.setHeader(key, proxyRes.headers[key]);
Â  Â  Â  Â  }
Â  Â  Â  });
Â  Â  Â Â 
Â  Â  Â  proxyRes.pipe(res);
Â  Â  });

Â  Â  proxyReq.on('error', (err) => {
Â  Â  Â  console.error('Proxy request failed:', err.message);
Â  Â  Â  if (!res.headersSent) {
Â  Â  Â  Â  res.status(502).json({ status: "error", error: 'Proxy request failed' });
Â  Â  Â  }
Â  Â  });

Â  Â  proxyReq.end();

Â  } catch (err) {
Â  Â  console.warn(`[Auth] Rejected token: ${err.name} - ${err.message}`);
Â  Â  return res.status(401).json({ status: "error", error: 'Token is invalid or has expired' });
Â  }
});
// -----------------------------------------------------------------------------
// Server Start
// -----------------------------------------------------------------------------
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`ðŸš€ Encrypted proxy server (ESM) running on http://localhost:${PORT}`);
});
